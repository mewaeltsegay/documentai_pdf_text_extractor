#!/usr/bin/env python3
"""
Quick Start Script for Google Document AI Layout Parser

This script helps you set up and test your Google Document AI configuration.
"""

import os
import sys
import json
from pathlib import Path

def check_dependencies():
    """Check if required dependencies are installed."""
    print("Checking dependencies...")
    
    try:
        import google.cloud.documentai
        print("‚úÖ Google Cloud Document AI library is installed")
    except ImportError:
        print("‚ùå Google Cloud Document AI library not found")
        print("   Please run: pip install -r requirements.txt")
        return False
    
    try:
        import pandas
        print("‚úÖ Pandas is installed")
    except ImportError:
        print("‚ùå Pandas not found")
        print("   Please run: pip install -r requirements.txt")
        return False
    
    return True

def setup_configuration():
    """Help user set up their configuration."""
    print("\n" + "="*50)
    print("CONFIGURATION SETUP")
    print("="*50)
    
    if os.path.exists("config_local.py"):
        print("‚úÖ config_local.py already exists")
        return True
    
    print("Creating config_local.py...")
    
    # Get user input
    project_id = input("Enter your Google Cloud Project ID: ").strip()
    if not project_id:
        print("‚ùå Project ID is required")
        return False
    
    location = input("Enter your processor location (us/eu) [us]: ").strip() or "us"
    
    processor_id = input("Enter your Document AI Processor ID: ").strip()
    if not processor_id:
        print("‚ùå Processor ID is required")
        return False
    
    service_account_path = input("Enter path to your service account JSON file: ").strip()
    if not service_account_path or not os.path.exists(service_account_path):
        print("‚ùå Service account file not found")
        return False
    
    # Create config_local.py
    config_content = f"""# Google Cloud Document AI Configuration
# Auto-generated by quick_start.py

# Google Cloud Project Settings
PROJECT_ID = "{project_id}"
LOCATION = "{location}"
PROCESSOR_ID = "{processor_id}"

# Authentication
SERVICE_ACCOUNT_PATH = "{service_account_path}"

# Directory Settings
PDF_DIRECTORY = "PDFs"
OUTPUT_DIRECTORY = "output"

# Processing Settings
MAX_CONCURRENT_REQUESTS = 5
RETRY_ATTEMPTS = 3
TIMEOUT_SECONDS = 60
"""
    
    with open("config_local.py", "w") as f:
        f.write(config_content)
    
    print("‚úÖ config_local.py created successfully")
    return True

def check_pdf_directory():
    """Check if PDF directory exists and has files."""
    print("\n" + "="*50)
    print("PDF DIRECTORY CHECK")
    print("="*50)
    
    pdf_dir = Path("PDFs")
    if not pdf_dir.exists():
        print("‚ùå PDFs directory not found")
        return False
    
    pdf_files = list(pdf_dir.glob("*.pdf"))
    if not pdf_files:
        print("‚ùå No PDF files found in PDFs directory")
        return False
    
    print(f"‚úÖ Found {len(pdf_files)} PDF files:")
    for pdf_file in pdf_files[:5]:  # Show first 5
        print(f"   - {pdf_file.name}")
    
    if len(pdf_files) > 5:
        print(f"   ... and {len(pdf_files) - 5} more files")
    
    return True

def test_authentication():
    """Test if authentication is working."""
    print("\n" + "="*50)
    print("AUTHENTICATION TEST")
    print("="*50)
    
    try:
        from config_local import PROJECT_ID, LOCATION, PROCESSOR_ID, SERVICE_ACCOUNT_PATH
    except ImportError:
        try:
            from config import PROJECT_ID, LOCATION, PROCESSOR_ID, SERVICE_ACCOUNT_PATH
        except ImportError:
            print("‚ùå Could not import configuration")
            return False
    
    try:
        from google.cloud import documentai
        from google.api_core.client_options import ClientOptions
        
        # Set up authentication
        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = SERVICE_ACCOUNT_PATH
        
        # Test connection
        opts = ClientOptions(api_endpoint=f"{LOCATION}-documentai.googleapis.com")
        client = documentai.DocumentProcessorServiceClient(client_options=opts)
        processor_name = client.processor_path(PROJECT_ID, LOCATION, PROCESSOR_ID)
        
        print(f"‚úÖ Authentication successful")
        print(f"   Project: {PROJECT_ID}")
        print(f"   Location: {LOCATION}")
        print(f"   Processor: {PROCESSOR_ID}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Authentication failed: {str(e)}")
        return False

def run_single_document_test():
    """Run a test with a single document."""
    print("\n" + "="*50)
    print("SINGLE DOCUMENT TEST")
    print("="*50)
    
    pdf_files = list(Path("PDFs").glob("*.pdf"))
    if not pdf_files:
        print("‚ùå No PDF files found for testing")
        return False
    
    test_file = pdf_files[0]
    print(f"Testing with: {test_file.name}")
    
    try:
        from example_single_doc import process_single_document
        process_single_document(str(test_file))
        print("‚úÖ Single document test completed successfully")
        return True
    except Exception as e:
        print(f"‚ùå Single document test failed: {str(e)}")
        return False

def main():
    """Main quick start function."""
    print("üöÄ Google Document AI Layout Parser - Quick Start")
    print("=" * 60)
    
    # Check dependencies
    if not check_dependencies():
        print("\n‚ùå Please install dependencies first:")
        print("   pip install -r requirements.txt")
        return
    
    # Setup configuration
    if not setup_configuration():
        print("\n‚ùå Configuration setup failed")
        return
    
    # Check PDF directory
    if not check_pdf_directory():
        print("\n‚ùå Please add PDF files to the PDFs directory")
        return
    
    # Test authentication
    if not test_authentication():
        print("\n‚ùå Authentication test failed")
        print("   Please check your Google Cloud configuration")
        return
    
    # Ask if user wants to run a test
    print("\n" + "="*50)
    print("READY TO TEST")
    print("="*50)
    
    response = input("Run a single document test? (y/n) [y]: ").strip().lower()
    if response != 'n':
        run_single_document_test()
    
    print("\n" + "="*50)
    print("NEXT STEPS")
    print("="*50)
    print("1. To process a single document:")
    print("   python example_single_doc.py PDFs/your_file.pdf")
    print()
    print("2. To process all documents:")
    print("   python parser.py")
    print()
    print("3. Results will be saved in the 'output' directory")
    print("=" * 50)

if __name__ == "__main__":
    main() 